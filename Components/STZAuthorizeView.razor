@using Microsoft.AspNetCore.Components.Authorization
@using STZ.Frontend.Authorization
@inject IPermissionService PermissionService

<CascadingAuthenticationState>
    @if (isLoading)
    {
        @Authorizing
    }
    else if (CanRenderContent)
    {
        if (Authorized != null)
        {
            @Authorized
        }
        else
        {
            @ChildContent
        }
    }
    else
    {
        @NotAuthorized
    }
</CascadingAuthenticationState>

@code {
    [Parameter] public string Feature { get; set; }
    [Parameter] public string Action { get; set; } = "View";

    [Parameter] public RenderFragment Authorized { get; set; }
    [Parameter] public RenderFragment NotAuthorized { get; set; }
    [Parameter] public RenderFragment Authorizing { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private bool isLoading = true;
    private bool isAuthenticated = false;
    private bool hasPermission = false;
    private bool CanRenderContent => (!RequiresPermission && isAuthenticated) || hasPermission;

    private bool RequiresPermission => !string.IsNullOrWhiteSpace(Feature);

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;

        var authState = await AuthenticationStateTask;
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        hasPermission = false;

        if (isAuthenticated)
        {
            if (RequiresPermission)
            {
                hasPermission = await PermissionService.HasAccessAsync(user, Feature, Action);
            }
            else
            {
                hasPermission = true;
            }
        }

        isLoading = false;
        StateHasChanged();
    }
}