@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using STZ.Frontend.Authorization
@inject IPermissionService PermissionService

@if (_isLoading)
{
    @Authorizing
}
else if (!_hasPermission)
{
    @NotAuthorized
}
else
{
    <RouteView RouteData="RouteData" DefaultLayout="DefaultLayout"/>
}

@code {
    [Parameter] public RouteData RouteData { get; set; }
    [Parameter] public Type DefaultLayout { get; set; }
    [Parameter] public RenderFragment Authorizing { get; set; }
    [Parameter] public RenderFragment NotAuthorized { get; set; }

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private bool _isLoading;
    private bool _hasPermission = true; // Por defecto, se permite el acceso

    protected override async Task OnInitializedAsync()
    {
        // Verificamos si el componente requiere autorización
        var requiresAuthorization = RouteData.PageType
            .GetCustomAttributes(typeof(STZAuthorize), true)
            .FirstOrDefault() is STZAuthorize;
            
        // Solo activamos la carga si requiere autorización
        _isLoading = requiresAuthorization;
    }

    protected override async Task OnParametersSetAsync()
    {
        // Sólo verificamos la autorización si hay un atributo STZAuthorize
        var attribute = RouteData.PageType
            .GetCustomAttributes(typeof(STZAuthorize), true)
            .FirstOrDefault() as STZAuthorize;
            
        if (attribute != null)
        {
            // Ya se estableció _isLoading = true en OnInitializedAsync
            
            var authState = await AuthenticationStateTask;
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                _hasPermission = await PermissionService.HasAccessAsync(user, attribute.Feature, attribute.Action);
            }
            else
            {
                _hasPermission = false;
            }

            _isLoading = false;
            StateHasChanged();
        }
        else
        {
            // No requiere autorización
            _isLoading = false;
            _hasPermission = true;
        }
    }
}